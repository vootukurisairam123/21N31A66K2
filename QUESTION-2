--react application 
App.js file

import React, { useState, useEffect } from 'react';
import ReactDOM from 'react-dom/client';
import { BrowserRouter as Router, Route, Routes, useParams, Link } from 'react-router-dom';
import { Container, Typography, Grid, Card, CardContent, CardMedia, Box, TextField, Select, MenuItem, Button } from '@mui/material';
const API_URL = "http://20.244.56.144/test";
const getProducts = async (company, category, minPrice, maxPrice, topN) => {
    try {
        const response = await fetch(${API_URL}/companies/${company}/categories/${category}/products/top-${topN}&minPrice=${minPrice}&maxPrice=${maxPrice});
        const data = await response.json();
        return data;
    } catch (error) {
        console.error("Error fetching products:", error);
        return [];
    }
};
const ProductCard = ({ product }) => {
    return (
        <Card style={{ maxWidth: 345 }}>
            <CardMedia
                component="img"
                height="140"
                image="https://via.placeholder.com/150"
                alt={product.productName}
            />
            <CardContent>
                <Typography gutterBottom variant="h5" component="div">
                    {product.productName}
                </Typography>
                <Typography variant="body2" color="text.secondary">
                    Company: {product.companyName}
                </Typography>
                <Typography variant="body2" color="text.secondary">
                    Price: ${product.price}
                </Typography>
                <Typography variant="body2" color="text.secondary">
                    Rating: {product.rating} / 5
                </Typography>
                <Typography variant="body2" color="text.secondary">
                    Discount: {product.discount}%
                </Typography>
                <Typography variant="body2" color="text.secondary">
                    Availability: {product.availability}
                </Typography>
                <Button component={Link} to={/product/${product.productName}}>
                    View Details
                </Button>
            </CardContent>
        </Card>
    );
};
const FilterSort = ({ filters, setFilters }) => {
    const handleChange = (e) => {
        setFilters({
            ...filters,
            [e.target.name]: e.target.value,
        });
    };

    return (
        <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 2 }}>
            <TextField
                label="Company"
                name="company"
                value={filters.company}
                onChange={handleChange}
            />
            <TextField
                label="Category"
                name="category"
                value={filters.category}
                onChange={handleChange}
            />
            <TextField
                label="Min Price"
                name="minPrice"
                type="number"
                value={filters.minPrice}
                onChange={handleChange}
            />
            <TextField
                label="Max Price"
                name="maxPrice"
                type="number"
                value={filters.maxPrice}
                onChange={handleChange}
            />
            <Select
                label="Sort By"
                name="sortBy"
                value={filters.sortBy}
                onChange={handleChange}
            >
                <MenuItem value="price">Price</MenuItem>
                <MenuItem value="rating">Rating</MenuItem>
                <MenuItem value="discount">Discount</MenuItem>
            </Select>
            <Button variant="contained" onClick={() => console.log("Filters applied!")}>
                Apply Filters
            </Button>
        </Box>
    );
};
const AllProducts = () => {
    const [products, setProducts] = useState([]);
    const [filters, setFilters] = useState({
        company: "AMZ",
        category: "Laptop",
        minPrice: 1,
        maxPrice: 10000,
        topN: 10,
        sortBy: "price",
    });

    useEffect(() => {
        const fetchProducts = async () => {
            const data = await getProducts(filters.company, filters.category, filters.minPrice, filters.maxPrice, filters.topN);
            setProducts(data);
        };
        fetchProducts();
    }, [filters]);

    return (
        <Container>
            <Typography variant="h4" gutterBottom>
                All Products
            </Typography>
            <FilterSort filters={filters} setFilters={setFilters} />
            <Grid container spacing={3}>
                {products.map((product, index) => (
                    <Grid item key={index} xs={12} sm={6} md={4}>
                        <ProductCard product={product} />
                    </Grid>
                ))}
            </Grid>
        </Container>
    );
};
const ProductDetails = ({ products }) => {
    const { id } = useParams();
    const product = products.find((prod) => prod.productName === id);

    if (!product) return <Typography>Product not found!</Typography>;

    return (
        <Container>
            <Typography variant="h4">{product.productName}</Typography>
            <Typography>Company: {product.companyName}</Typography>
            <Typography>Category: {product.category}</Typography>
            <Typography>Price: ${product.price}</Typography>
            <Typography>Rating: {product.rating} / 5</Typography>
            <Typography>Discount: {product.discount}%</Typography>
            <Typography>Availability: {product.availability}</Typography>
        </Container>
    );
};
function App() {
    const [products, setProducts] = useState([]);

    return (
        <Router>
            <Routes>
                <Route path="/" element={<AllProducts />} />
                <Route path="/product/:id" element={<ProductDetails products={products} />} />
            </Routes>
        </Router>
    );
}
const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
    <React.StrictMode>
        <App />
    </React.StrictMode>
); output for this
